// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Collections.Concurrent;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace ReSharperPlugin.SilkDotNet.DataGenerator.Outputs
{
    public static class Output
    {
        internal static ILogger Logger = Program.LoggerProvider.CreateLogger("Output");
        public static async Task WriteAsync
        (
            ConcurrentDictionary<string, ConcurrentDictionary<string, string>> docUrls,
            ConcurrentDictionary<string, ConcurrentDictionary<string, Version>> versionNumbers
        )
        {
            Logger.LogInformation($"Opening file \"{Config.OutputPath}\"...");
            await using var sw = new StreamWriter(Config.OutputPath);
            using var sr = new StringReader(Config.LicenseHeader);
            string? line;
            while ((line = await sr.ReadLineAsync()) is not null)
            {
                await sw.WriteLineAsync($"// {line}");
            }
            
            await sw.WriteLineAsync();
            await sw.WriteLineAsync($"// Generated by ReSharperPlugin.SilkDotNet.DataGenerator on {DateTime.UtcNow}");
            await sw.WriteLineAsync();
            await sw.WriteLineAsync("using System;");
            await sw.WriteLineAsync("using System.Collections.Generic;");
            await sw.WriteLineAsync();
            await sw.WriteLineAsync($"namespace {Config.OutputNamespace}");
            await sw.WriteLineAsync("{");
            await sw.WriteLineAsync($"    internal static partial class {Config.OutputClass}");
            await sw.WriteLineAsync("    {");
            Logger.LogInformation("Writing documentation URLs...");
            await sw.WriteLineAsync("        public static Dictionary<string, Dictionary<string, string>> " +
                                    "DocumentationUrls { get; } = new()");
            await sw.WriteLineAsync("        {");
            foreach (var (silkNamespace, urls) in docUrls)
            {
                if (urls.IsEmpty)
                {
                    continue;
                }
                
                await sw.WriteLineAsync("            {");
                await sw.WriteLineAsync($"                \"{silkNamespace}\",");
                await sw.WriteLineAsync("                new()");
                await sw.WriteLineAsync("                {");
                foreach (var (symbol, url) in urls)
                {
                    await sw.WriteLineAsync($"                    {{\"{symbol}\", \"{url}\"}},");
                }
                await sw.WriteLineAsync("                }");
                await sw.WriteLineAsync("            },");
            }
            await sw.WriteLineAsync("        };");
            await sw.WriteLineAsync();
            Logger.LogInformation("Writing version mappings...");
            await sw.WriteLineAsync("        public static Dictionary<string, Dictionary<string, Version>> " +
                                    "VersionMappings { get; } = new()");
            await sw.WriteLineAsync("        {");
            foreach (var (silkNamespace, versions) in versionNumbers)
            {
                if (versions.IsEmpty)
                {
                    continue;
                }

                await sw.WriteLineAsync("            {");
                await sw.WriteLineAsync($"                \"{silkNamespace}\",");
                await sw.WriteLineAsync("                new()");
                await sw.WriteLineAsync("                {");
                foreach (var (symbol, v) in versions)
                {
                    await sw.WriteLineAsync($"                    {{\"{symbol}\", new({v.Major}, {v.Minor})}},");
                }
                await sw.WriteLineAsync("                }");
                await sw.WriteLineAsync("            },");
            }
            await sw.WriteLineAsync("        };");
            await sw.WriteLineAsync("    }");
            await sw.WriteLineAsync("}");
            await sw.WriteLineAsync();
            Logger.LogInformation("Finishing up...");
            await sw.FlushAsync();
            Logger.LogInformation("Done.");
        }
    }
}
